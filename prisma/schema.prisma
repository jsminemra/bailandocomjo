generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String            @id @default(cuid())
  email              String            @unique
  name               String?
  phone              String?
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @updatedAt
  platform           String?
  purchaseId         String?
  purchaseDate       DateTime?
  subscriptionStatus String            @default("trial")
  trialStartDate     DateTime          @default(now())
  trialEndDate       DateTime?
  subscriptionId     String?
  hasCompletedQuiz   Boolean           @default(false)
  workoutGoal        String?
  experienceLevel    String?
  weeklyFrequency    Int?
  workoutIntensity   String?
  sessionDuration    Int?
  limitations        String?
  workoutLocation    String?
  accounts           Account[]
  sessions           Session[]
  workoutProgress    WorkoutProgress[]
  workouts           Workout[]

  @@map("users")
}

model WorkoutPlan {
  id          String     @id @default(cuid())
  name        String
  description String?
  duration    Int
  difficulty  String
  category    String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  exercises   Exercise[]
  workouts    Workout[]

  @@map("workout_plans")
}

model Exercise {
  id              String            @id @default(cuid())
  name            String
  description     String?
  muscleGroup     String
  equipment       String?
  videoUrl        String?
  imageUrl        String?
  workoutPlanId   String
  sets            Int
  reps            String
  restTime        Int
  weight          String?
  instructions    String?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  workoutPlan     WorkoutPlan       @relation(fields: [workoutPlanId], references: [id])
  workoutProgress WorkoutProgress[]

  @@map("exercises")
}

model Workout {
  id            String      @id @default(cuid())
  userId        String
  workoutPlanId String
  scheduledDate DateTime
  completedDate DateTime?
  status        String      @default("scheduled")
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  user          User        @relation(fields: [userId], references: [id])
  workoutPlan   WorkoutPlan @relation(fields: [workoutPlanId], references: [id])

  @@map("workouts")
}

model WorkoutProgress {
  id            String   @id @default(cuid())
  userId        String
  exerciseId    String
  completedSets Int
  completedReps String
  weightUsed    String?
  notes         String?
  completedAt   DateTime @default(now())
  exercise      Exercise @relation(fields: [exerciseId], references: [id])
  user          User     @relation(fields: [userId], references: [id])

  @@map("workout_progress")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model WorkoutTemplate {
  id          String       @id @default(cuid())
  name        String
  level       String
  frequency   Int
  location    String
  description String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  days        WorkoutDay[]

  @@unique([level, frequency, location])
  @@map("workout_templates")
}

model WorkoutDay {
  id                String            @id @default(cuid())
  workoutTemplateId String
  dayNumber         Int
  dayName           String
  workoutTemplate   WorkoutTemplate   @relation(fields: [workoutTemplateId], references: [id], onDelete: Cascade)
  exercises         WorkoutExercise[]

  @@map("workout_days")
}

model WorkoutExercise {
  id           String     @id @default(cuid())
  workoutDayId String
  name         String
  sets         Int
  reps         String
  restSeconds  Int
  instructions String?
  muscleGroup  String
  equipment    String?
  videoUrl     String?
  order        Int
  workoutDay   WorkoutDay @relation(fields: [workoutDayId], references: [id], onDelete: Cascade)

  @@map("workout_exercises")
}

model Lead {
  id              String   @id @default(cuid())
  name            String
  email           String?
  age             String?
  experienceLevel String?
  goal            String?
  bodyType        String?
  bodyGoal        String?
  source          String?
  leadStatus      String   @default("new")
  userId          String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@map("leads")
}
