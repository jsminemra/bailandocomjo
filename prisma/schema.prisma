generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String               @id @default(cuid())
  email              String               @unique
  name               String?
  phone              String?
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  platform           String?
  purchaseId         String?
  purchaseDate       DateTime?
  subscriptionStatus String               @default("trial")
  trialStartDate     DateTime             @default(now())
  trialEndDate       DateTime?
  subscriptionId     String?
  hasCompletedQuiz   Boolean              @default(false)
  workoutGoal        String?
  experienceLevel    String?
  weeklyFrequency    Int?
  workoutIntensity   String?
  sessionDuration    Int?
  limitations        String?
  workoutLocation    String?
  focusArea          String?
  accounts           Account[]
  generated_workouts generated_workouts[]
  sessions           Session[]
  workoutProgress    WorkoutProgress[]

  @@map("users")
}

model Exercise {
  id                         String                       @id @default(cuid())
  name                       String
  equipment                  String?
  videoUrl                   String?
  difficulty                 String?
  location                   String?
  targetMuscle               String?
  description                String?
  imageUrl                   String?
  instructions               String?
  muscleGroup                String?
  reps                       String?
  restTime                   Int?
  sets                       Int?
  weight                     String?
  workoutPlanId              String?
  workout_exercise_instances workout_exercise_instances[]
  workoutProgress            WorkoutProgress[]

  @@map("exercises")
}

model WorkoutProgress {
  id            String   @id @default(cuid())
  userId        String
  exerciseId    String
  completedSets Int
  completedReps String
  weightUsed    String?
  notes         String?
  completedAt   DateTime @default(now())
  exercise      Exercise @relation(fields: [exerciseId], references: [id])
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("workout_progress")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Lead {
  id              String   @id @default(cuid())
  name            String
  email           String   @unique
  age             String?
  experienceLevel String?
  goal            String?
  bodyType        String?
  bodyGoal        String?
  source          String?
  leadStatus      String   @default("new")
  userId          String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  workoutLocation String?

  @@map("leads")
}

model generated_workout_days {
  id                         String                       @id
  dayNumber                  Int
  title                      String
  generatedWorkoutId         String
  generated_workouts         generated_workouts           @relation(fields: [generatedWorkoutId], references: [id], onDelete: Cascade)
  workout_exercise_instances workout_exercise_instances[]
}

model generated_workouts {
  id                     String                   @id
  createdAt              DateTime                 @default(now())
  userId                 String
  generated_workout_days generated_workout_days[]
  users                  User                     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model workout_exercise_instances {
  id                     String                 @id
  order                  Int
  sets                   String
  reps                   String
  rest                   String
  dayId                  String
  exerciseId             String
  generated_workout_days generated_workout_days @relation(fields: [dayId], references: [id], onDelete: Cascade)
  exercises              Exercise               @relation(fields: [exerciseId], references: [id])
}

model WorkoutTemplate {
  id          String       @id @default(cuid())
  name        String
  level       String
  frequency   Int
  location    String
  description String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  days        WorkoutDay[]

  @@unique([level, frequency, location])
  @@map("workout_templates")
}

model WorkoutDay {
  id                String            @id @default(cuid())
  workoutTemplateId String
  dayNumber         Int
  dayName           String
  workoutTemplate   WorkoutTemplate   @relation(fields: [workoutTemplateId], references: [id], onDelete: Cascade)
  exercises         WorkoutExercise[]

  @@map("workout_days")
}

model WorkoutExercise {
  id           String     @id @default(cuid())
  workoutDayId String
  name         String
  sets         Int
  reps         String
  restSeconds  Int
  instructions String?
  muscleGroup  String
  equipment    String?
  order        Int
  videoUrls    String[]   @default([])
  workoutDay   WorkoutDay @relation(fields: [workoutDayId], references: [id], onDelete: Cascade)

  @@map("workout_exercises")
}
